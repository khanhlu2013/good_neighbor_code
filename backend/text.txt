// uploadWidget = () => {
//   window.cloudinary.openUploadWidget(
//     {
//       cloud_name: "goodneighboors",
//       upload_preset: "postimage",
//       public_id: "abcd1234"
//     },
//     function(error, result) {
//       console.log(result);
//     }
//   );
// };
---

With good neighboor, There is a single entry point to access the app using using a google account. On your first time using good neighboor, the app will create an account for you in the background. 

...

Usually, an app provide a few option to sign up and login. But may be, less is more. You don't have to remember if you have sign up or not. or if you signed up with google or facebook or with an email and password. there is no chance for a duplicated account. 

---

. LOW PRIORITY INVENTORY
. ----------------------
  . upgrade api to support multiple spa web app
  . upgrade api to support mobile app. (fow now api only work with browser)
    . what is it mean for a mobile app to receive a cookie from a successful login response
  . figure out how to use a post request for sign up and log out. did andrew mead use post?
  . also understand get/post for good
  . search by name with pagination/connection? damn
  . think about the auth flow. If i just logout, i do not need to check if i am login. also i should know locally from cookie that i am not login.
  . firgure out how to make the api agnostic to the front client url. any one can write a SPA app, host it somewhere, login to goodneighboor api and get redirect there. learn about the uri callback. seem like there is multiple. uri.
  . how to replace manual await for Model.init() with a middle ware. what is the best practice for production?
  . can composite key be utilize for a single column? or is it just the first key, and not the second key

. INVENTORY
. ---------
  . if there is no internet, i need to response better.
  . notification page
  . write some test for the home/profile/auth route
  . display list of your friend + remove friend
  . add picture to profile
  . on the front end, i need to somehow extract out all the const, including url and param expected such as addFriend : IdToAdd
  . truely understand mongo, and how to fix the array duplicate issue that a user can't have duplicated friend
  . seem like when the user db is empty, the get profile return error
  . get prettier into code studio
  . change connection into connection-model.js
  . allow inviter to revoke friend after invited-person approved.
  . think about profile -> connection organization to split up code
  . clean up async handler from express and create a error handler middleware
  . rename add to invite
  . friends page:
    how can i use existing feature on searchByEmail and manage this table?
  . how can i test the frontend login page and the back end auth-api route? do i leave this alone?
  . before each for e2e take a long time. invest do a script here
  . provide spinner every where pending for response
  . investigate props type
  . handle frontend error: lets say somehow the session terminated. and a user access API and get 401. i do not want to display a unhandle project rejection.
  . make e2e test more stayble by narrow down the snapshot area
  . allow multiple post image with the main image as the thumbnail
  . eliminate default import for both backend and frontend. test auto import for backend.
  . see if we can eliminate refreshConnectionsCb. if we don't differentiate between create/modify and just have a crudConnection, then we don't need to refresh it inside searchEmail because searchEmail just simply call crud for create and the parent management component will refresh it without needing to pass the cb in the child component
  . should i factor out a lib to get posts, connections ...
  . create error handling for the front end to be more detail: internet or server bug
  . shareLog, create and update failure should be unit tested and not e2e tested.
  . work on deployment. and provide a make-sense mvp for auth. 
  . when i login, i need to make it a post because if it is a get, i will be able to go back into history which is a undesireable behavior
  . fuck: change post into user. shareLog to have from and to; or consider borrower and lender. but from and to do share many time. and well understood from many context. 
  . for share, isReturnByTo can't be true if isApprovedByFrom is undefined or false. i need this validation
 . renaming share.borrower
 . create a model for connection for the frontend
 . color coded available post , and current borrowing post
. how do i know a post have picture or not?
. test when connection change, InPost will be changing. this will be affecting current borrowing. think about mvp
. Using Immutable Data Structures: https://reactjs.org/docs/optimizing-performance.html#the-power-of-not-mutating-data
. https://facebook.github.io/immutable-js/
. post: { ...state.post, isActive }, immutable.js seem can aleviate this boilerplate
. put glyphycon remove in both friend and outFriend request, make col the same
. when connection change, inPost need to refresh (by a key from privateApp)
  . remove react tab, so that i can make the app more perforamnce on lazy loading.  ( i need to find a better library)
  . create notification-dashboard api for dash board notification. this can be delay until i find a better react tab. cause for now, all stuff will load, and will set my dash board for me
. split out post into 2 stated component: crud and decide (the management code is too big)
. date sort, for request, borrow, return share: create field for model and create ui feature to default sort and custom sort
. split outpost component into 2 stated componont: crud and decision
. create front end model validation
. notification when request is approved and borrow is return. 
. a bit of flashing public_app after login before loading the private app
. side track: on demo, make a remark how many request in borrow list, so that borrower might consider return it
. demo: make video to show what is good neightboor look like. 
. move validation logic out of mongoose and into mongo db. this way, i do not need to use mongoose and still can benefit from default value and some validation logic stuff. 
. fail attempt: can i use mongoose to embed more logic into the db such as default value
  . using console, i can insert a new db with the default value
  . insert a doc and validate that default value is honor. 
  . this conclude mongoose didn't create db as i want. 
. lets just work on fb style return record for InPost too fuck it
. can i create a proptype for my own model class? to validate dateReturn it could be nullOrmustbeadate
. understand passport,  {proxy: true} http vs https
. understand api-url frontend: REACT_APP_NODE_ENV, BACKEND_BASE_URL
. d-flex is what i want for row class, fix all the col-sm ...
. clean up isActive. how do i show it?
. loadingicon for the login button: this is a href, i am not sure how to do it
. how do i make the image profile image a live one, instead of a dead url. it could change. do not store the url on the backend, always get it from google. 
. code review refactoring for post management 
. better validate url profile image, isnullorrequire. but i like to use a live url not a dead one right?
. &:hover what is that?
. with the current min-width, tab bar header can't contain if there is notification
. LEARNING: investigate when race condition of ajax(search for 'a' and 'ab') and our-of-sync return result?







. TODAY
. -----

. express-session deprecated undefined resave option; provide resave option
. investigate: when i go to google page and go back, it show incorrect login page instead of login page again
---
. i need to make the app say that it is creating an account. this way user wont create duplicated account. 
---
loading icon for login
  . when i click login, show loading icon
  . after login, it got redirect this time will the session id, but not the loginUser
  . that is why it still show the public app. 
  . it then request for the login user which is the profile url
  . then it set the state and get the private app. 


to solve this, the redirect must have the profile user. lets see if i can do this. 
lets take a look at the redirect right? lets just take a few meditation, brain doesn't work well
sidetrack: what happen when user can't login to google?
---
is the current cookie httpOnly? before i continue reading the article, can i use the current knowledge to optimize this? meaning, when i load the app, how do i know if i should load the public or private app. the private dont need to have the user as the user will be load async for display purpose only. 
ok, so lets say i can verify that the cookie is alive. i just go ahead and load the private app. private app don't need to have loginUser. it will get it by itself. if it fail, then we can just throw error. public app will have option to login. after login, and redirect, the app will know if it is private or public. this all lay the the ability to know if my cookie is valid or not right? lets say fist time the app find out that there is no sesion and load the public app, public app will try to login wtih failed info. is the server will set the cookie or not?
---
. why decide post doesn't make LoadingIcon appear on outpost tab?
. genList within the ui_helper can factor to reduce DRY 
. verify all the snapshot
. update inPost test to show other tab
--
. make sure that changing connection changing inpost, i guess this is a good time to actually controling the loading... from the outer app. make the tab a control one. 
. can i use open id connect instead of oauth. also, invite friend from face book and google? authorization of reading contact. 
. wish list
. picture
---
. cover letter
. lets spend some times again on algorithm, green book. 
. some job search: 
  . ngoc
  . ask vi's boyfriend
. slack
---
. i like to test things with jest and enzym stuff
---
. i like to experience with reset local git. working on a experimental branch. commit a few good and a few bad. i like to take out the bad one. reset hard. 
--
. rethink the notification right? something is fishy here. or is it fishy?
---
. organize impost folder
---
. back end validate: null or require image url
---
how do i log my bug? into a file?
---
how do i catch 401 error ?
---
section vs div
---
create a container
---
less sass css inheritance
  min-width: 420px;

---
. do somehting about the table background color css
---
. deal with the banner style there are 2 of them. possible to pass in prop for theme

. deal with min-width 420 inside both places of the banner and app wrap. consider prop type validation. 

AppMinWidth -> AppMinWidthMixin

---
. kill (inside appComponent)
      inPostNoteCount,
      outPostNoteCount,
      connectionNoteCount

. kill (insideAppPrivate)
    onConnectionNotify,
    onInPostNotify,
    onOutPostNotify


. kill the pass down function from app
. kill the pass down function from connection_management
. make the notification a prop for component. 
. make header taking a prop for connection note.
. create a header container to give it the note prop
. isCheckingAuth pass down to header
. create appPrivateContainer to take in selectTab?
. i need a selectTab reducer
---
clean up this : isNote_requestWithNoBorrow
---
calculateInPostNotification
calculateOutPostNotification

make sure import is correct into the appHeader
---
unawareReturnShareLatest
---
create action for this now
onAppTabChange
---
i remember deep copy an object once. why do i need it since i just touch the topic of immutability.
---
inPost -> post in the action and reducer of inPost. we dont need the in because of the context. 
---
TabPanelStyle -> TabPanel
---
inPost: approveNotePosts -> approveAlertPosts
---
immutability: inPost_action.js -> requestInPost()
    curPost.shares.push(newShare);
---    
requestingPostIds
---
inPostManagement: change this into onRequestPost, onUnRequestPost, ...
        onCreateShare={this.onCreateShare}
        onDeleteShare={this.onDeleteShare}
        onAwareShare={this.onAwareShare}
        onReturnShare={this.onReturnShare}

---
  state = {
    inPostNoteCount: null,
    outPostNoteCount: null,
    connectionNoteCount: null
  };

  ---

. there is 2 concern: top level notification. 
. change notification into alert. 

. inPostApproveAlert
. outPostReturnAlert
. outPostRequestAlert
. outPostRequestReturnAlert: kill this one. i will combine it inside. the app header. 

. now i am working on inPost. lets change InPostNotification into approveAlert. 

----
. how componentDidMount trigger the fetchOutPosts
. NotificationItem -> alert item
. move reducer
. move component